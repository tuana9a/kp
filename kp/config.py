from typing import List

TIMEOUT_IN_SECONDS = 30 * 60

PROXMOX_VM_ID_RANGE = [100, 99999]
PROXMOX_VM_TAG_DELIMITER = ";"

CONTAINERD_CONFIG = """# https://github.com/etcd-io/etcd/issues/13670
version = 2
[plugins]
  [plugins."io.containerd.grpc.v1.cri"]
    [plugins."io.containerd.grpc.v1.cri".containerd]
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
"""

KUBERNETES_ADMIN_CONF_PATH = "/etc/kubernetes/admin.conf"
KUBERNETES_CERT_PATHS = [
    "/etc/kubernetes/pki/ca.crt",
    "/etc/kubernetes/pki/ca.key",
    "/etc/kubernetes/pki/sa.key",
    "/etc/kubernetes/pki/sa.pub",
    "/etc/kubernetes/pki/front-proxy-ca.crt",
    "/etc/kubernetes/pki/front-proxy-ca.key",
    "/etc/kubernetes/pki/etcd/ca.crt",
    "/etc/kubernetes/pki/etcd/ca.key",
]
KUBERNETES_STATIC_POD_DIR = "/etc/kubernetes/manifests/"

KUBEVIP_MANIFEST_FILENAME = "kube-vip.yaml"
KUBEVIP_MANIFEST_TEMPLATE = """
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: kube-vip
  namespace: kube-system
spec:
  containers:
  - args:
    - manager
    env:
    - name: vip_arp
      value: "true"
    - name: port
      value: "6443"
    - name: vip_nodename
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: vip_interface
      value: $INTERFACE
    - name: vip_cidr
      value: "32"
    - name: dns_mode
      value: first
    - name: cp_enable
      value: "true"
    - name: cp_namespace
      value: kube-system
    - name: vip_leaderelection
      value: "true"
    - name: vip_leasename
      value: plndr-cp-lock
    - name: vip_leaseduration
      value: "15"
    - name: vip_renewdeadline
      value: "10"
    - name: vip_retryperiod
      value: "2"
    - name: address
      value: $VIP
    - name: prometheus_server
      value: :2112
    image: ghcr.io/kube-vip/kube-vip:v0.8.1
    imagePullPolicy: IfNotPresent
    name: kube-vip
    resources: {}
    securityContext:
      capabilities:
        add:
        - NET_ADMIN
        - NET_RAW
    volumeMounts:
    - mountPath: /etc/kubernetes/admin.conf
      name: kubeconfig
  hostAliases:
  - hostnames:
    - kubernetes
    ip: 127.0.0.1
  hostNetwork: true
  volumes:
  - hostPath:
      path: /etc/kubernetes/admin.conf
    name: kubeconfig
status: {}
"""

HAPROXY_CFG_PATH = "/etc/haproxy/haproxy.cfg"
HAPROXY_CONFIG_TEMPLATE = """# generated by kp
defaults
    log     global
    mode    http
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend stats
    mode http
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST

frontend api-server
    mode tcp
    bind 0.0.0.0:6443
    default_backend control-plane

backend control-plane
    mode tcp
    option httpchk GET /healthz
    http-check expect status 200
    option ssl-hello-chk
    balance source
{control_plane_backends}
"""

UPGRADE_PLANE_SCRIPT = """# Add the repository for K8S
kubernetes_version="{kubernetes_version_minor}"
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v$kubernetes_version/deb/Release.key | gpg --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$kubernetes_version/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list

# Install kubernetes dependencies
apt-get update
apt install -y kubeadm='{kubernetes_version_patch}-*'
"""

UPGRADE_WORKER_SCRIPT = """# Add the repository for K8S
kubernetes_version="{kubernetes_version_minor}"
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v$kubernetes_version/deb/Release.key | gpg --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$kubernetes_version/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list

# Install kubernetes dependencies
apt-get update
apt install -y kubeadm='{kubernetes_version_patch}-*'
"""


class Cfg:
    def __init__(
            self,
            proxmox_node: str,
            proxmox_host: str,
            proxmox_verify_ssl=False,
            proxmox_user: str = None,
            proxmox_password: str = None,
            proxmox_token_name: str = None,
            proxmox_token_value: str = None,
            vm_id_range: List[int] = PROXMOX_VM_ID_RANGE,
            vm_preserved_ids: List[int] = [],
            vm_preserved_ips: List[str] = [],
            vm_ssh_keys: str = "",
            vm_name_prefix="i-",
            **kwargs) -> None:
        self.proxmox_node = proxmox_node
        self.proxmox_host = proxmox_host
        self.proxmox_verify_ssl = proxmox_verify_ssl
        self.proxmox_user = proxmox_user
        self.proxmox_password = proxmox_password
        self.proxmox_token_name = proxmox_token_name
        self.proxmox_token_value = proxmox_token_value
        self.vm_id_range = vm_id_range
        self.vm_preserved_ids = vm_preserved_ids
        self.vm_preserved_ips = vm_preserved_ips
        self.vm_ssh_keys = vm_ssh_keys
        self.vm_name_prefix = vm_name_prefix
        self.kwargs = kwargs


class Tag:
    lb = "k8s-lb"
    ctlpl = "k8s-ctlpl"
    wk = "k8s-wk"
    kp = "kp"
